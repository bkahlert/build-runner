#!/usr/bin/env recordr

declare tmp && tmp=$(mktemp "build/rec-XXXXXX") && rm "$tmp" && mkdir -p "$tmp"
cd "$tmp"

# Returns the ID of the most recently started container.
container_latest() {
  docker container ls --format "{{.ID}}" --latest
}

# Returns the IP address of the specified container.
container_ip() {
  docker inspect "${1?container ID missing}" >inspect.json
  curl -LfsS https://git.io/init.rc | "$SHELL" -s -- jq --join-output '.[].NetworkSettings.Networks.bridge.IPAddress' inspect.json
}

# Executes the specified command with the specified timeout.
# Arguments:
#   1 - timeout in seconds
#   2 - command
# Returns 1 if timed out 0 otherwise
timeout() {
  time=$1
  command="/bin/bash -c \"$2\""
  expect -c "set echo \"-no""echo\"; set timeout $time; spawn -no""echo $command; expect timeout { exit 1 } eof { exit 0 }"
}

# Tests if the specified host is running SSH on the specified port.
ssh_running() {
  timeout 1 "cat < /dev/tcp/${1?host missing}/${2:-22}" | grep -q "SSH"
}

# Run the specified location (default: STDIN) when a Docker container
# running SSH on port 2022 is found.
when_ready() {
  local name ip result=0 script
  script=$(cat ${1--})
  (
    while true; do
      name=$(container_latest)
      ip=$(container_ip "$name")
      if ssh_running "$ip" 2022; then
        break
      else
        sleep 1
      fi
    done
    sleep 3
    {
      [ ! -t 2 ] || tput 'set''af' 4
      (ip=$ip bash -c "$script") || result=$?
      [ ! -t 2 ] || tput sgr0
    }
    sleep 3
    docker rm --force "$name" &>/dev/null
    return "$result"
  ) &
}

when_ready <<'SCRIPT'
commands=$(cat <<'COMMANDS'

border() {
    local title=" $1 " edge
    edge=$(echo "$title" | sed 's/./─/g')
    echo " ╭$edge╮"
    echo " │$title│"
    echo " ╰$edge╯"
}

border "Successfully connected via SSH as $(id)"
COMMANDS
)
ssh \
  -i test_key \
  -o UserKnownHostsFile=/dev/null \
  -o StrictHostKeyChecking=no \
  -o LogLevel=ERROR \
  -p 2022 \
  "runner@$ip" \
  -t "$commands"
SCRIPT

rec ssh-keygen -b 2048 -t rsa -f test_key -q -N ""
rec <<'REC'
docker run --rm -e PUID="$(id -u)" -e PGID="$(id -g)" -e AUTHORIZED_KEYS="$(cat test_key.pub)" -v "$(pwd):$(pwd)" -w "$(pwd)" -p 2022:2022 bkahlert/build-runner:edge
REC

wait
